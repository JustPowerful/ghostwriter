export const runtime = "edge";

import { auth } from "@/lib/auth/auth";
import { OpenAI } from "openai";

export async function POST(request: Request) {
  try {
    const session = await auth();
    if (!session) {
      return new Response(
        JSON.stringify({ success: false, message: "Unauthorized" }),
        {
          status: 401,
          headers: { "Content-Type": "application/json" },
        }
      );
    }

    const body = await request.json();
    const workspaceId = body.workspaceId;

    const currentURL = new URL(request.url).origin;
    const res = await fetch(`${currentURL}/api/workspace?id=${workspaceId}`, {
      method: "GET",
      headers: { cookie: request.headers.get("cookie") || "" },
    });

    const data = await res.json();
    const workspace = data.workspace;

    if (!workspace) {
      return new Response(
        JSON.stringify({ success: false, message: "Workspace not found" }),
        {
          status: 404,
          headers: { "Content-Type": "application/json" },
        }
      );
    }

    // Create prompt as before
    const prompt = `
        Generate a professional email summarizing the following completed tasks in the triple quote marks :
        '''
        ${workspace.tasks
          .map(
            (task: any) =>
              `Task: ${task.title}\nDescription: ${task.description}`
          )
          .join("\n")}
        '''
        Follow the following rules for the email:
        1. Address the email receiver's name to the following name: ${
          workspace.receiverName
        }
        2. The sender's name should be the following name: ${
          workspace.user.firstname
        } ${workspace.user.lastname}
        3. Do not use placeholder text in the email like [Receiver Name] or [Your Name] that will make them detect it as a generated email.
        4. Keep the email in a human-like tone.
        5. Make sure the email is concise and to the point.
        6. Do not include this character in the output * as it will make the application die.
        7. Say "Thank you" or "Cordially" at the end of the email.
        8. Do not include any Markdown or HTML in the email.
        9. Do not include any word that seems like it was generated by an AI, for example "cutting edge" or "state-of-the-art".
        10. Do not mention the full name of the receiver in the email, just mention his firstname. for example if the name is "John Doe", just mention "John".
        11. Do not include any word like "cutting edge", "state-of-the-art" or "seemlessly" in the email, as it will make the email look like it was generated by an AI.
        12. Only output the email content, do not include anything else outside of the email content.
        13. Include every completed task in a bullet point like this:
        - Task: [Task Title]
        Description: [Task Description]
        14. Improve the descriptions of the tasks if needed to make them more professional.
        15. Only output the final version of the email, do not include any other text or other alternative versions.
        
    `;

    const openai = new OpenAI({
      baseURL: "https://openrouter.ai/api/v1",
      apiKey: process.env.OPEN_ROUTER_API_KEY,
    });

    // Create and return a readable stream
    const encoder = new TextEncoder();
    const stream = new ReadableStream({
      async start(controller) {
        try {
          const completion = await openai.chat.completions.create({
            model: "deepseek/deepseek-r1:free",
            messages: [{ role: "user", content: prompt }],
            stream: true,
          });

          for await (const chunk of completion) {
            const content = chunk.choices[0]?.delta?.content || "";
            if (content) {
              controller.enqueue(encoder.encode(content));
            }
          }
        } catch (error: any) {
          console.error("Stream error:", error);
          controller.enqueue(encoder.encode(`Error: ${error.message}`));
        } finally {
          controller.close();
        }
      },
    });

    return new Response(stream, {
      headers: {
        "Content-Type": "text/plain; charset=utf-8",
        "X-Content-Type-Options": "nosniff",
        "Cache-Control": "no-cache, no-transform",
        "Transfer-Encoding": "chunked",
      },
    });
  } catch (error) {
    console.error("Error in generateEmail API:", error);
    return new Response(
      JSON.stringify({ success: false, message: "Error generating email" }),
      {
        status: 500,
        headers: { "Content-Type": "application/json" },
      }
    );
  }
}
